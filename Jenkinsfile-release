#!/usr/bin/env groovy
REGISTRIES = [
        [
                url       : 'registry.hub.docker.com',
                credential: 'DockerHub-Infinispan'
        ],
        [
                url       : 'quay.io',
                credential: 'Quay-Infinispan'
        ]
]

QUARKUS_VERSION = params.quarkusVersion ?: params.ispnVersion
IMAGE_CONFIG = [
        server         : [
                descriptor        : 'server-openjdk.yaml',
                platforms         : 'linux/amd64,linux/arm64',
                server            : [
                        name: 'server',
                        url : "https://downloads.jboss.org/infinispan/${params.ispnVersion}/infinispan-server-${params.ispnVersion}.zip"
                ]
        ],
        'server-native': [
                descriptor        : 'server-native.yaml',
                platforms         : 'linux/amd64,linux/arm64',
                server            : [
                        name  : 'quarkus-src',
                        url   : "https://github.com/infinispan/infinispan/archive/${QUARKUS_VERSION}.tar.gz",
                        target: 'quarkus-src.tar.gz'
                ]
        ],
        'cli': [
                descriptor        : 'cli.yaml',
                platforms         : 'linux/amd64,linux/arm64',
                cli            : [
                        name  : 'quarkus-src',
                        url   : "https://github.com/infinispan/infinispan/archive/${QUARKUS_VERSION}.tar.gz",
                        target: 'quarkus-src.tar.gz'
                ]
        ]
]

void updateServerDescriptor(imageName, image) {
    def descriptor = image.descriptor
    def yaml = readYaml file: descriptor
    def isMultiStage = yaml instanceof List

    if (isMultiStage) {
        def builder = yaml[0]
        def runner = yaml[1]

        // Pass the current runner.version to determine if this is not the first image build for this ISPN version
        updateImageVersion image, runner.version
        builder.version = image.version
        runner.version = image.version

        switch (imageName) {
            case 'cli':
                builder.artifacts[0] = image.cli
                break
            case 'server-native':
                builder.artifacts[0] = image.server
                break
        }

        runner.labels.findAll {it.name == 'version' || it.name == 'release'}.each { label ->
            label.value = params.ispnVersion
        }
    } else {
        updateImageVersion image, yaml.version
        yaml.artifacts[0] = image.server
        yaml.version = image.version

        yaml.labels.findAll {it.name == 'version' || it.name == 'release'}.each { label ->
            label.value = params.ispnVersion
        }
    }

    sh "rm ${descriptor}"
    writeYaml file: descriptor, data: yaml
}

void updateImageVersion(image, version) {
    def buildNumber = 1
    if (version.contains(params.ispnVersion))
        buildNumber += version.tokenize('-').last() as Integer

    image.version = "${params.ispnVersion}-${buildNumber}"
}

pipeline {
    agent {
        label 'slave-group-graalvm'
    }

    parameters {
        string(name: 'ispnVersion', description: 'Version of Infinispan artifact to be used')
        string(name: 'quarkusVersion', description: 'Version of Infinispan Quarkus to be used (blank to use same as ispnVersion)')
        string(name: 'images', defaultValue: 'server, server-native, cli', description: 'A comma-separated list of images to be released')
        booleanParam(name: 'pushLatestTag', defaultValue: false, description: 'If true, updates the :latest tag to equal this release for each selected image')
        booleanParam(name: 'dryRun', defaultValue: false, description: 'If true, we don\'t deploy to image repositories')
        gitParameter(name: 'branch', defaultValue: 'origin/master', branchFilter: 'origin/(.*)', type: 'PT_BRANCH', description: 'Branch to release from')
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
                sh "git checkout ${params.branch}"
            }
        }

        stage('Update Version and Artifacts') {
            steps {
                script {
                    IMAGES = [:]
                    def images = params.images.contains(',') ? params.images.split(',') : [params.images]
                    images.each {i ->
                        def imageName = i.trim()
                        if (!IMAGE_CONFIG.containsKey(imageName)) {
                            currentBuild.result = 'ABORTED'
                            error("Unknown image '${imageName}'")
                        }
                        IMAGES[imageName] = IMAGE_CONFIG[imageName]
                        updateServerDescriptor imageName, IMAGES[imageName]
                    }
                }
            }
        }

        stage('Build Dry Run') {
            steps {
                script {
                    IMAGES.each { name, image ->
                        sh "cat ${image.descriptor}"
                        // Only generate the files for the image. It will be built by buildx
                        sh "cekit --descriptor ${image.descriptor} --target target-${name} build --dry-run docker --pull"
                    }
                }
            }
        }

        stage('Deploy Release') {
            when {
                expression { !params.dryRun }
            }
            steps {
                script {
                    IMAGES.each { name, image ->
                        def imageBuild = "infinispan/${name}"
                        REGISTRIES.each { registry ->
                            withDockerRegistry([ credentialsId: registry.credential, url: "https://${registry.url}" ]) {
                                def fqImageName = "${registry.url}/${imageBuild}"
                                def version = "${image.version}"

                                def tags = ["${fqImageName}:${params.ispnVersion}", "${fqImageName}:${version}", "${fqImageName}:${version.tokenize('.')[0,1].join('.')}"]
                                if (params.pushLatestTag) {
                                    tags << "${fqImageName}:latest"
                                }

                                def tagArgs = tags.collect{ "-t $it" }.join(' ')

                                // Initialize docker buildx
                                sh "docker run --rm --privileged quay.io/infinispan-test/binfmt:qemu-v8.0.4-33  --install arm64"
                                sh "docker buildx rm multiarch || true"
                                sh "docker buildx create --name multiarch --use"
                                sh "docker buildx build --platform ${image.platforms} ${tagArgs} --push target-${name}/image"
                            }
                        }
                    }
                }
            }
        }

        stage('Tag') {
            when {
                expression { !params.dryRun }
            }
            steps {
                script {
                    IMAGES.each { name, image ->
                        sh "git add ${image.descriptor}"
                        sh "git -c user.name='Infinispan' -c user.email='infinispan@infinispan.org' commit -m 'Releasing Version ${image.version} of ${name} image'"
                        sh "git tag ${name}-${image.version}"
                        sh "git push origin ${name}-${image.version}"
                    }
                    sh "git push origin ${params.branch}"
                }
            }
        }
    }

    post {
        failure {
            echo "post build status: failure"
            emailext to: '${DEFAULT_RECIPIENTS}', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}'
        }

        success {
            echo "post build status: success"
            emailext to: '${DEFAULT_RECIPIENTS}', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}'
        }

        cleanup {
            sh 'git clean -fdx || echo "git clean failed, exit code $?"'
            sh 'docker container prune -f'
            sh 'docker rmi $(docker images -f "dangling=true" -q) || true'
        }
    }
}
